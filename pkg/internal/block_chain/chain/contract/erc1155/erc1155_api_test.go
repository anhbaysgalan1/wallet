package erc1155

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"math/big"
	"testing"
)

func TestGetInputForCreateAsset(t *testing.T) {
	res, err := GetInputForCreateAsset(
		new(big.Int).SetUint64(1),
		common.HexToAddress("0xd75596573b4e691e2ee7cb3b5618b8ab8618c7d5"),
		"angle")
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(hexutil.Encode(res))
	// OutPut: 0xb63a2c160000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d75596573b4e691e2ee7cb3b5618b8ab8618c7d500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000005616e676c65000000000000000000000000000000000000000000000000000000
}

func TestParseCreateAsset(t *testing.T) {
	input := "0xb63a2c160000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d75596573b4e691e2ee7cb3b5618b8ab8618c7d500000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000005616e676c65000000000000000000000000000000000000000000000000000000"
	amount, addr, name, err := ParseCreateAsset(input)
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(amount)
	t.Log(addr)
	t.Log(name)
}

func TestGetInputForTransfer(t *testing.T) {
	res, err := GetInputForTransfer(
		common.HexToAddress("0xd75596573b4e691e2ee7cb3b5618b8ab8618c7d5"),
		common.HexToAddress("0xd75596573b4e691e2ee7cb3b5618b8ab8618c7d5"),
		new(big.Int).SetUint64(1),
		new(big.Int).SetUint64(1000))
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(hexutil.Encode(res))
	// OutPut: 0x0febdd49000000000000000000000000d75596573b4e691e2ee7cb3b5618b8ab8618c7d5000000000000000000000000d75596573b4e691e2ee7cb3b5618b8ab8618c7d5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8
}

func TestParseTransfer(t *testing.T) {
	input := "0x0febdd49000000000000000000000000d75596573b4e691e2ee7cb3b5618b8ab8618c7d5000000000000000000000000d75596573b4e691e2ee7cb3b5618b8ab8618c7d5000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8"
	from, to, id, amount, err := ParseTransfer(input)
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(from)
	t.Log(to)
	t.Log(amount)
	t.Log(id)
}

func TestGetInputForExpand(t *testing.T) {
	res, err := GetInputForExpand(
		new(big.Int).SetUint64(1),
		new(big.Int).SetUint64(1000))
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(hexutil.Encode(res))
	// OutPut:0x874b3afc000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8
}

func TestParseExpand(t *testing.T) {
	input := "0x874b3afc000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000003e8"
	id, amount, err := ParseExpand(input)
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(amount)
	t.Log(id)
}

func TestUnPackCreateAssetEven(t *testing.T) {
	input := "0x0000000000000000000000005b38da6a701c568545dcfcb03fcb875f56beddc400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000000057761746572000000000000000000000000000000000000000000000000000000"
	data, err := hexutil.Decode(input)
	if err != nil {
		t.Error(err)
		return
	}
	announce, id, name, amount, err := UnPackCreateAssetEven(data)
	if err != nil {
		t.Error(err)
		return
	}
	t.Log(announce)
	t.Log(id)
	t.Log(name)
	t.Log(amount)
}
