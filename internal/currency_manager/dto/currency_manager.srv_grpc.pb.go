// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrencyManagerSrvClient is the client API for CurrencyManagerSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyManagerSrvClient interface {
	// 获取所有币种信息
	CurrencyGetForList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrencyList, error)
	CurrencyGetForMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrencyMap, error)
	// 获取转账网络信息
	NetGetByCy(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NetList, error)
	NetGetByName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*Net, error)
}

type currencyManagerSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyManagerSrvClient(cc grpc.ClientConnInterface) CurrencyManagerSrvClient {
	return &currencyManagerSrvClient{cc}
}

func (c *currencyManagerSrvClient) CurrencyGetForList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrencyList, error) {
	out := new(CurrencyList)
	err := c.cc.Invoke(ctx, "/Account.service.v1.CurrencyManagerSrv/CurrencyGetForList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyManagerSrvClient) CurrencyGetForMap(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CurrencyMap, error) {
	out := new(CurrencyMap)
	err := c.cc.Invoke(ctx, "/Account.service.v1.CurrencyManagerSrv/CurrencyGetForMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyManagerSrvClient) NetGetByCy(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*NetList, error) {
	out := new(NetList)
	err := c.cc.Invoke(ctx, "/Account.service.v1.CurrencyManagerSrv/NetGetByCy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyManagerSrvClient) NetGetByName(ctx context.Context, in *NameReq, opts ...grpc.CallOption) (*Net, error) {
	out := new(Net)
	err := c.cc.Invoke(ctx, "/Account.service.v1.CurrencyManagerSrv/NetGetByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyManagerSrvServer is the server API for CurrencyManagerSrv service.
// All implementations must embed UnimplementedCurrencyManagerSrvServer
// for forward compatibility
type CurrencyManagerSrvServer interface {
	// 获取所有币种信息
	CurrencyGetForList(context.Context, *Empty) (*CurrencyList, error)
	CurrencyGetForMap(context.Context, *Empty) (*CurrencyMap, error)
	// 获取转账网络信息
	NetGetByCy(context.Context, *NameReq) (*NetList, error)
	NetGetByName(context.Context, *NameReq) (*Net, error)
	mustEmbedUnimplementedCurrencyManagerSrvServer()
}

// UnimplementedCurrencyManagerSrvServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyManagerSrvServer struct {
}

func (UnimplementedCurrencyManagerSrvServer) CurrencyGetForList(context.Context, *Empty) (*CurrencyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyGetForList not implemented")
}
func (UnimplementedCurrencyManagerSrvServer) CurrencyGetForMap(context.Context, *Empty) (*CurrencyMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrencyGetForMap not implemented")
}
func (UnimplementedCurrencyManagerSrvServer) NetGetByCy(context.Context, *NameReq) (*NetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetGetByCy not implemented")
}
func (UnimplementedCurrencyManagerSrvServer) NetGetByName(context.Context, *NameReq) (*Net, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetGetByName not implemented")
}
func (UnimplementedCurrencyManagerSrvServer) mustEmbedUnimplementedCurrencyManagerSrvServer() {}

// UnsafeCurrencyManagerSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyManagerSrvServer will
// result in compilation errors.
type UnsafeCurrencyManagerSrvServer interface {
	mustEmbedUnimplementedCurrencyManagerSrvServer()
}

func RegisterCurrencyManagerSrvServer(s grpc.ServiceRegistrar, srv CurrencyManagerSrvServer) {
	s.RegisterService(&CurrencyManagerSrv_ServiceDesc, srv)
}

func _CurrencyManagerSrv_CurrencyGetForList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyManagerSrvServer).CurrencyGetForList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Account.service.v1.CurrencyManagerSrv/CurrencyGetForList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyManagerSrvServer).CurrencyGetForList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyManagerSrv_CurrencyGetForMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyManagerSrvServer).CurrencyGetForMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Account.service.v1.CurrencyManagerSrv/CurrencyGetForMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyManagerSrvServer).CurrencyGetForMap(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyManagerSrv_NetGetByCy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyManagerSrvServer).NetGetByCy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Account.service.v1.CurrencyManagerSrv/NetGetByCy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyManagerSrvServer).NetGetByCy(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyManagerSrv_NetGetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyManagerSrvServer).NetGetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Account.service.v1.CurrencyManagerSrv/NetGetByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyManagerSrvServer).NetGetByName(ctx, req.(*NameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrencyManagerSrv_ServiceDesc is the grpc.ServiceDesc for CurrencyManagerSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrencyManagerSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Account.service.v1.CurrencyManagerSrv",
	HandlerType: (*CurrencyManagerSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrencyGetForList",
			Handler:    _CurrencyManagerSrv_CurrencyGetForList_Handler,
		},
		{
			MethodName: "CurrencyGetForMap",
			Handler:    _CurrencyManagerSrv_CurrencyGetForMap_Handler,
		},
		{
			MethodName: "NetGetByCy",
			Handler:    _CurrencyManagerSrv_NetGetByCy_Handler,
		},
		{
			MethodName: "NetGetByName",
			Handler:    _CurrencyManagerSrv_NetGetByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency_manager.srv.proto",
}
