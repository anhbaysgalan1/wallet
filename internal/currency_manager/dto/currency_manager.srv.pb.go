// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: currency_manager.srv.proto

package dto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_manager_srv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_currency_manager_srv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_currency_manager_srv_proto_rawDescGZIP(), []int{0}
}

type CurrencyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyList []*Currency `protobuf:"bytes,1,rep,name=currencyList,proto3" json:"currencyList,omitempty"`
}

func (x *CurrencyList) Reset() {
	*x = CurrencyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_manager_srv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyList) ProtoMessage() {}

func (x *CurrencyList) ProtoReflect() protoreflect.Message {
	mi := &file_currency_manager_srv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyList.ProtoReflect.Descriptor instead.
func (*CurrencyList) Descriptor() ([]byte, []int) {
	return file_currency_manager_srv_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyList) GetCurrencyList() []*Currency {
	if x != nil {
		return x.CurrencyList
	}
	return nil
}

type CurrencyMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyMap map[string]*Currency `protobuf:"bytes,1,rep,name=currencyMap,proto3" json:"currencyMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CurrencyMap) Reset() {
	*x = CurrencyMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_manager_srv_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyMap) ProtoMessage() {}

func (x *CurrencyMap) ProtoReflect() protoreflect.Message {
	mi := &file_currency_manager_srv_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyMap.ProtoReflect.Descriptor instead.
func (*CurrencyMap) Descriptor() ([]byte, []int) {
	return file_currency_manager_srv_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyMap) GetCurrencyMap() map[string]*Currency {
	if x != nil {
		return x.CurrencyMap
	}
	return nil
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Status int64  `protobuf:"varint,2,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_manager_srv_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_currency_manager_srv_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_currency_manager_srv_proto_rawDescGZIP(), []int{3}
}

func (x *Currency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Currency) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type NameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *NameReq) Reset() {
	*x = NameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_manager_srv_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameReq) ProtoMessage() {}

func (x *NameReq) ProtoReflect() protoreflect.Message {
	mi := &file_currency_manager_srv_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameReq.ProtoReflect.Descriptor instead.
func (*NameReq) Descriptor() ([]byte, []int) {
	return file_currency_manager_srv_proto_rawDescGZIP(), []int{4}
}

func (x *NameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NetList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nets []*Net `protobuf:"bytes,1,rep,name=nets,proto3" json:"nets,omitempty"`
}

func (x *NetList) Reset() {
	*x = NetList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_manager_srv_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetList) ProtoMessage() {}

func (x *NetList) ProtoReflect() protoreflect.Message {
	mi := &file_currency_manager_srv_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetList.ProtoReflect.Descriptor instead.
func (*NetList) Descriptor() ([]byte, []int) {
	return file_currency_manager_srv_proto_rawDescGZIP(), []int{5}
}

func (x *NetList) GetNets() []*Net {
	if x != nil {
		return x.Nets
	}
	return nil
}

type Net struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	SpareName string `protobuf:"bytes,2,opt,name=SpareName,proto3" json:"SpareName,omitempty"`
	MasterCy  string `protobuf:"bytes,3,opt,name=MasterCy,proto3" json:"MasterCy,omitempty"`
	AddressCy string `protobuf:"bytes,4,opt,name=AddressCy,proto3" json:"AddressCy,omitempty"`
	Status    bool   `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
	AdviseGas string `protobuf:"bytes,6,opt,name=AdviseGas,proto3" json:"AdviseGas,omitempty"`
	MinGas    string `protobuf:"bytes,7,opt,name=MinGas,proto3" json:"MinGas,omitempty"`
	MaxGas    string `protobuf:"bytes,8,opt,name=MaxGas,proto3" json:"MaxGas,omitempty"`
	Weight    int32  `protobuf:"varint,9,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (x *Net) Reset() {
	*x = Net{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_manager_srv_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Net) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net) ProtoMessage() {}

func (x *Net) ProtoReflect() protoreflect.Message {
	mi := &file_currency_manager_srv_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net.ProtoReflect.Descriptor instead.
func (*Net) Descriptor() ([]byte, []int) {
	return file_currency_manager_srv_proto_rawDescGZIP(), []int{6}
}

func (x *Net) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Net) GetSpareName() string {
	if x != nil {
		return x.SpareName
	}
	return ""
}

func (x *Net) GetMasterCy() string {
	if x != nil {
		return x.MasterCy
	}
	return ""
}

func (x *Net) GetAddressCy() string {
	if x != nil {
		return x.AddressCy
	}
	return ""
}

func (x *Net) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Net) GetAdviseGas() string {
	if x != nil {
		return x.AdviseGas
	}
	return ""
}

func (x *Net) GetMinGas() string {
	if x != nil {
		return x.MinGas
	}
	return ""
}

func (x *Net) GetMaxGas() string {
	if x != nil {
		return x.MaxGas
	}
	return ""
}

func (x *Net) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_currency_manager_srv_proto protoreflect.FileDescriptor

var file_currency_manager_srv_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x73, 0x72, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61,
	0x70, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x1a,
	0x5c, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a,
	0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x73, 0x22, 0xef, 0x01, 0x0a,
	0x03, 0x4e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x70, 0x61,
	0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x76, 0x69,
	0x73, 0x65, 0x47, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x76,
	0x69, 0x73, 0x65, 0x47, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x69, 0x6e, 0x47, 0x61, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x4d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x4d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x32, 0xce,
	0x02, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x72, 0x76, 0x12, 0x53, 0x0a, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x11, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12,
	0x19, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1f, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0a, 0x4e, 0x65, 0x74, 0x47, 0x65, 0x74, 0x42, 0x79, 0x43, 0x79, 0x12, 0x1b, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x22, 0x00, 0x42,
	0x25, 0x5a, 0x23, 0x2e, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x64, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_currency_manager_srv_proto_rawDescOnce sync.Once
	file_currency_manager_srv_proto_rawDescData = file_currency_manager_srv_proto_rawDesc
)

func file_currency_manager_srv_proto_rawDescGZIP() []byte {
	file_currency_manager_srv_proto_rawDescOnce.Do(func() {
		file_currency_manager_srv_proto_rawDescData = protoimpl.X.CompressGZIP(file_currency_manager_srv_proto_rawDescData)
	})
	return file_currency_manager_srv_proto_rawDescData
}

var file_currency_manager_srv_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_currency_manager_srv_proto_goTypes = []interface{}{
	(*Empty)(nil),        // 0: Account.service.v1.Empty
	(*CurrencyList)(nil), // 1: Account.service.v1.CurrencyList
	(*CurrencyMap)(nil),  // 2: Account.service.v1.CurrencyMap
	(*Currency)(nil),     // 3: Account.service.v1.Currency
	(*NameReq)(nil),      // 4: Account.service.v1.NameReq
	(*NetList)(nil),      // 5: Account.service.v1.NetList
	(*Net)(nil),          // 6: Account.service.v1.Net
	nil,                  // 7: Account.service.v1.CurrencyMap.CurrencyMapEntry
}
var file_currency_manager_srv_proto_depIdxs = []int32{
	3, // 0: Account.service.v1.CurrencyList.currencyList:type_name -> Account.service.v1.Currency
	7, // 1: Account.service.v1.CurrencyMap.currencyMap:type_name -> Account.service.v1.CurrencyMap.CurrencyMapEntry
	6, // 2: Account.service.v1.NetList.nets:type_name -> Account.service.v1.Net
	3, // 3: Account.service.v1.CurrencyMap.CurrencyMapEntry.value:type_name -> Account.service.v1.Currency
	0, // 4: Account.service.v1.CurrencyManagerSrv.CurrencyGetForList:input_type -> Account.service.v1.Empty
	0, // 5: Account.service.v1.CurrencyManagerSrv.CurrencyGetForMap:input_type -> Account.service.v1.Empty
	4, // 6: Account.service.v1.CurrencyManagerSrv.NetGetByCy:input_type -> Account.service.v1.NameReq
	4, // 7: Account.service.v1.CurrencyManagerSrv.NetGetByName:input_type -> Account.service.v1.NameReq
	1, // 8: Account.service.v1.CurrencyManagerSrv.CurrencyGetForList:output_type -> Account.service.v1.CurrencyList
	2, // 9: Account.service.v1.CurrencyManagerSrv.CurrencyGetForMap:output_type -> Account.service.v1.CurrencyMap
	5, // 10: Account.service.v1.CurrencyManagerSrv.NetGetByCy:output_type -> Account.service.v1.NetList
	6, // 11: Account.service.v1.CurrencyManagerSrv.NetGetByName:output_type -> Account.service.v1.Net
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_currency_manager_srv_proto_init() }
func file_currency_manager_srv_proto_init() {
	if File_currency_manager_srv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_currency_manager_srv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_manager_srv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_manager_srv_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_manager_srv_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_manager_srv_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_manager_srv_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_manager_srv_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Net); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_currency_manager_srv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_currency_manager_srv_proto_goTypes,
		DependencyIndexes: file_currency_manager_srv_proto_depIdxs,
		MessageInfos:      file_currency_manager_srv_proto_msgTypes,
	}.Build()
	File_currency_manager_srv_proto = out.File
	file_currency_manager_srv_proto_rawDesc = nil
	file_currency_manager_srv_proto_goTypes = nil
	file_currency_manager_srv_proto_depIdxs = nil
}
