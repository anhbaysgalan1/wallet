// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountSrvClient is the client API for AccountSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSrvClient interface {
	// 获取(创建)帐号 如果已经存在账户，则直接返回
	AccountGet(ctx context.Context, in *AccountGetReq, opts ...grpc.CallOption) (*AddressResp, error)
	// 获取账户转账地址
	AddressGet(ctx context.Context, in *AddressGetReq, opts ...grpc.CallOption) (*AddressResp, error)
}

type accountSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSrvClient(cc grpc.ClientConnInterface) AccountSrvClient {
	return &accountSrvClient{cc}
}

func (c *accountSrvClient) AccountGet(ctx context.Context, in *AccountGetReq, opts ...grpc.CallOption) (*AddressResp, error) {
	out := new(AddressResp)
	err := c.cc.Invoke(ctx, "/Account.service.v1.AccountSrv/AccountGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSrvClient) AddressGet(ctx context.Context, in *AddressGetReq, opts ...grpc.CallOption) (*AddressResp, error) {
	out := new(AddressResp)
	err := c.cc.Invoke(ctx, "/Account.service.v1.AccountSrv/AddressGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSrvServer is the server API for AccountSrv service.
// All implementations must embed UnimplementedAccountSrvServer
// for forward compatibility
type AccountSrvServer interface {
	// 获取(创建)帐号 如果已经存在账户，则直接返回
	AccountGet(context.Context, *AccountGetReq) (*AddressResp, error)
	// 获取账户转账地址
	AddressGet(context.Context, *AddressGetReq) (*AddressResp, error)
	mustEmbedUnimplementedAccountSrvServer()
}

// UnimplementedAccountSrvServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSrvServer struct {
}

func (UnimplementedAccountSrvServer) AccountGet(context.Context, *AccountGetReq) (*AddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGet not implemented")
}
func (UnimplementedAccountSrvServer) AddressGet(context.Context, *AddressGetReq) (*AddressResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressGet not implemented")
}
func (UnimplementedAccountSrvServer) mustEmbedUnimplementedAccountSrvServer() {}

// UnsafeAccountSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSrvServer will
// result in compilation errors.
type UnsafeAccountSrvServer interface {
	mustEmbedUnimplementedAccountSrvServer()
}

func RegisterAccountSrvServer(s grpc.ServiceRegistrar, srv AccountSrvServer) {
	s.RegisterService(&AccountSrv_ServiceDesc, srv)
}

func _AccountSrv_AccountGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSrvServer).AccountGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Account.service.v1.AccountSrv/AccountGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSrvServer).AccountGet(ctx, req.(*AccountGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSrv_AddressGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSrvServer).AddressGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Account.service.v1.AccountSrv/AddressGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSrvServer).AddressGet(ctx, req.(*AddressGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSrv_ServiceDesc is the grpc.ServiceDesc for AccountSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Account.service.v1.AccountSrv",
	HandlerType: (*AccountSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountGet",
			Handler:    _AccountSrv_AccountGet_Handler,
		},
		{
			MethodName: "AddressGet",
			Handler:    _AccountSrv_AddressGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.srv.proto",
}
