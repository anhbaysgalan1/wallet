// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	dto "tp_wallet/internal/tp_wallet/adapter/dto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletSrvClient is the client API for WalletSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletSrvClient interface {
	// AccountGet 获取(创建)帐号 如果已经存在账户，则直接返回
	AccountGet(ctx context.Context, in *dto.UidReq, opts ...grpc.CallOption) (*dto.AccountGetResp, error)
	// AccountGet 获取(创建)帐号 如果已经存在账户，则直接返回
	BalanceGet(ctx context.Context, in *dto.UidReq, opts ...grpc.CallOption) (*dto.AccountGetResp, error)
	// 离线转账
	TransferH2OForOffline(ctx context.Context, in *dto.TransferForOfflineReq, opts ...grpc.CallOption) (*dto.Empty, error)
	// 提现
	TransferH2OCash(ctx context.Context, in *dto.TransferCashReq, opts ...grpc.CallOption) (*dto.Empty, error)
	// 获取系统交易账户地址
	GetSysTransferAddr(ctx context.Context, in *dto.Empty, opts ...grpc.CallOption) (*dto.AddrResp, error)
	// 处理一笔订单
	DealWithBill(ctx context.Context, in *dto.BillInfo, opts ...grpc.CallOption) (*dto.Empty, error)
	// nft创建
	NftCreate(ctx context.Context, in *dto.NftInfo, opts ...grpc.CallOption) (*dto.Hash, error)
	// 查询nft归属
	NftGetAttribution(ctx context.Context, in *dto.NftToken, opts ...grpc.CallOption) (*dto.NftInfo, error)
	// 获取用户拥有的链上frt
	NftGetByUid(ctx context.Context, in *dto.NftGetByUidReq, opts ...grpc.CallOption) (*dto.NftInfoS, error)
	// 提现
	NftCash(ctx context.Context, in *dto.NftCashReq, opts ...grpc.CallOption) (*dto.Empty, error)
	// 获取系统合约账户地址
	GetSysContractAddr(ctx context.Context, in *dto.ContractType, opts ...grpc.CallOption) (*dto.AddrResp, error)
	// 处理待上链订单
	JobH2OWalletTransferToBlock(ctx context.Context, in *dto.Empty, opts ...grpc.CallOption) (*dto.Empty, error)
	JobNftWalletTransferToBlock(ctx context.Context, in *dto.Empty, opts ...grpc.CallOption) (*dto.Empty, error)
}

type walletSrvClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletSrvClient(cc grpc.ClientConnInterface) WalletSrvClient {
	return &walletSrvClient{cc}
}

func (c *walletSrvClient) AccountGet(ctx context.Context, in *dto.UidReq, opts ...grpc.CallOption) (*dto.AccountGetResp, error) {
	out := new(dto.AccountGetResp)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/AccountGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) BalanceGet(ctx context.Context, in *dto.UidReq, opts ...grpc.CallOption) (*dto.AccountGetResp, error) {
	out := new(dto.AccountGetResp)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/BalanceGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) TransferH2OForOffline(ctx context.Context, in *dto.TransferForOfflineReq, opts ...grpc.CallOption) (*dto.Empty, error) {
	out := new(dto.Empty)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/TransferH2OForOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) TransferH2OCash(ctx context.Context, in *dto.TransferCashReq, opts ...grpc.CallOption) (*dto.Empty, error) {
	out := new(dto.Empty)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/TransferH2OCash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) GetSysTransferAddr(ctx context.Context, in *dto.Empty, opts ...grpc.CallOption) (*dto.AddrResp, error) {
	out := new(dto.AddrResp)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/GetSysTransferAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) DealWithBill(ctx context.Context, in *dto.BillInfo, opts ...grpc.CallOption) (*dto.Empty, error) {
	out := new(dto.Empty)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/DealWithBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) NftCreate(ctx context.Context, in *dto.NftInfo, opts ...grpc.CallOption) (*dto.Hash, error) {
	out := new(dto.Hash)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/NftCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) NftGetAttribution(ctx context.Context, in *dto.NftToken, opts ...grpc.CallOption) (*dto.NftInfo, error) {
	out := new(dto.NftInfo)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/NftGetAttribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) NftGetByUid(ctx context.Context, in *dto.NftGetByUidReq, opts ...grpc.CallOption) (*dto.NftInfoS, error) {
	out := new(dto.NftInfoS)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/NftGetByUid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) NftCash(ctx context.Context, in *dto.NftCashReq, opts ...grpc.CallOption) (*dto.Empty, error) {
	out := new(dto.Empty)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/NftCash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) GetSysContractAddr(ctx context.Context, in *dto.ContractType, opts ...grpc.CallOption) (*dto.AddrResp, error) {
	out := new(dto.AddrResp)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/GetSysContractAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) JobH2OWalletTransferToBlock(ctx context.Context, in *dto.Empty, opts ...grpc.CallOption) (*dto.Empty, error) {
	out := new(dto.Empty)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/JobH2OWalletTransferToBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSrvClient) JobNftWalletTransferToBlock(ctx context.Context, in *dto.Empty, opts ...grpc.CallOption) (*dto.Empty, error) {
	out := new(dto.Empty)
	err := c.cc.Invoke(ctx, "/Wallet.service.v1.WalletSrv/JobNftWalletTransferToBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletSrvServer is the server API for WalletSrv service.
// All implementations must embed UnimplementedWalletSrvServer
// for forward compatibility
type WalletSrvServer interface {
	// AccountGet 获取(创建)帐号 如果已经存在账户，则直接返回
	AccountGet(context.Context, *dto.UidReq) (*dto.AccountGetResp, error)
	// AccountGet 获取(创建)帐号 如果已经存在账户，则直接返回
	BalanceGet(context.Context, *dto.UidReq) (*dto.AccountGetResp, error)
	// 离线转账
	TransferH2OForOffline(context.Context, *dto.TransferForOfflineReq) (*dto.Empty, error)
	// 提现
	TransferH2OCash(context.Context, *dto.TransferCashReq) (*dto.Empty, error)
	// 获取系统交易账户地址
	GetSysTransferAddr(context.Context, *dto.Empty) (*dto.AddrResp, error)
	// 处理一笔订单
	DealWithBill(context.Context, *dto.BillInfo) (*dto.Empty, error)
	// nft创建
	NftCreate(context.Context, *dto.NftInfo) (*dto.Hash, error)
	// 查询nft归属
	NftGetAttribution(context.Context, *dto.NftToken) (*dto.NftInfo, error)
	// 获取用户拥有的链上frt
	NftGetByUid(context.Context, *dto.NftGetByUidReq) (*dto.NftInfoS, error)
	// 提现
	NftCash(context.Context, *dto.NftCashReq) (*dto.Empty, error)
	// 获取系统合约账户地址
	GetSysContractAddr(context.Context, *dto.ContractType) (*dto.AddrResp, error)
	// 处理待上链订单
	JobH2OWalletTransferToBlock(context.Context, *dto.Empty) (*dto.Empty, error)
	JobNftWalletTransferToBlock(context.Context, *dto.Empty) (*dto.Empty, error)
	mustEmbedUnimplementedWalletSrvServer()
}

// UnimplementedWalletSrvServer must be embedded to have forward compatible implementations.
type UnimplementedWalletSrvServer struct {
}

func (UnimplementedWalletSrvServer) AccountGet(context.Context, *dto.UidReq) (*dto.AccountGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGet not implemented")
}
func (UnimplementedWalletSrvServer) BalanceGet(context.Context, *dto.UidReq) (*dto.AccountGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceGet not implemented")
}
func (UnimplementedWalletSrvServer) TransferH2OForOffline(context.Context, *dto.TransferForOfflineReq) (*dto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferH2OForOffline not implemented")
}
func (UnimplementedWalletSrvServer) TransferH2OCash(context.Context, *dto.TransferCashReq) (*dto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferH2OCash not implemented")
}
func (UnimplementedWalletSrvServer) GetSysTransferAddr(context.Context, *dto.Empty) (*dto.AddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysTransferAddr not implemented")
}
func (UnimplementedWalletSrvServer) DealWithBill(context.Context, *dto.BillInfo) (*dto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DealWithBill not implemented")
}
func (UnimplementedWalletSrvServer) NftCreate(context.Context, *dto.NftInfo) (*dto.Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftCreate not implemented")
}
func (UnimplementedWalletSrvServer) NftGetAttribution(context.Context, *dto.NftToken) (*dto.NftInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftGetAttribution not implemented")
}
func (UnimplementedWalletSrvServer) NftGetByUid(context.Context, *dto.NftGetByUidReq) (*dto.NftInfoS, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftGetByUid not implemented")
}
func (UnimplementedWalletSrvServer) NftCash(context.Context, *dto.NftCashReq) (*dto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NftCash not implemented")
}
func (UnimplementedWalletSrvServer) GetSysContractAddr(context.Context, *dto.ContractType) (*dto.AddrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysContractAddr not implemented")
}
func (UnimplementedWalletSrvServer) JobH2OWalletTransferToBlock(context.Context, *dto.Empty) (*dto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobH2OWalletTransferToBlock not implemented")
}
func (UnimplementedWalletSrvServer) JobNftWalletTransferToBlock(context.Context, *dto.Empty) (*dto.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobNftWalletTransferToBlock not implemented")
}
func (UnimplementedWalletSrvServer) mustEmbedUnimplementedWalletSrvServer() {}

// UnsafeWalletSrvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletSrvServer will
// result in compilation errors.
type UnsafeWalletSrvServer interface {
	mustEmbedUnimplementedWalletSrvServer()
}

func RegisterWalletSrvServer(s grpc.ServiceRegistrar, srv WalletSrvServer) {
	s.RegisterService(&WalletSrv_ServiceDesc, srv)
}

func _WalletSrv_AccountGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.UidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).AccountGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/AccountGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).AccountGet(ctx, req.(*dto.UidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_BalanceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.UidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).BalanceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/BalanceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).BalanceGet(ctx, req.(*dto.UidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_TransferH2OForOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.TransferForOfflineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).TransferH2OForOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/TransferH2OForOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).TransferH2OForOffline(ctx, req.(*dto.TransferForOfflineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_TransferH2OCash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.TransferCashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).TransferH2OCash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/TransferH2OCash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).TransferH2OCash(ctx, req.(*dto.TransferCashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_GetSysTransferAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).GetSysTransferAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/GetSysTransferAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).GetSysTransferAddr(ctx, req.(*dto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_DealWithBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.BillInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).DealWithBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/DealWithBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).DealWithBill(ctx, req.(*dto.BillInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_NftCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.NftInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).NftCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/NftCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).NftCreate(ctx, req.(*dto.NftInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_NftGetAttribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.NftToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).NftGetAttribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/NftGetAttribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).NftGetAttribution(ctx, req.(*dto.NftToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_NftGetByUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.NftGetByUidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).NftGetByUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/NftGetByUid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).NftGetByUid(ctx, req.(*dto.NftGetByUidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_NftCash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.NftCashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).NftCash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/NftCash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).NftCash(ctx, req.(*dto.NftCashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_GetSysContractAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.ContractType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).GetSysContractAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/GetSysContractAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).GetSysContractAddr(ctx, req.(*dto.ContractType))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_JobH2OWalletTransferToBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).JobH2OWalletTransferToBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/JobH2OWalletTransferToBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).JobH2OWalletTransferToBlock(ctx, req.(*dto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSrv_JobNftWalletTransferToBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSrvServer).JobNftWalletTransferToBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Wallet.service.v1.WalletSrv/JobNftWalletTransferToBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSrvServer).JobNftWalletTransferToBlock(ctx, req.(*dto.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletSrv_ServiceDesc is the grpc.ServiceDesc for WalletSrv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletSrv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Wallet.service.v1.WalletSrv",
	HandlerType: (*WalletSrvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountGet",
			Handler:    _WalletSrv_AccountGet_Handler,
		},
		{
			MethodName: "BalanceGet",
			Handler:    _WalletSrv_BalanceGet_Handler,
		},
		{
			MethodName: "TransferH2OForOffline",
			Handler:    _WalletSrv_TransferH2OForOffline_Handler,
		},
		{
			MethodName: "TransferH2OCash",
			Handler:    _WalletSrv_TransferH2OCash_Handler,
		},
		{
			MethodName: "GetSysTransferAddr",
			Handler:    _WalletSrv_GetSysTransferAddr_Handler,
		},
		{
			MethodName: "DealWithBill",
			Handler:    _WalletSrv_DealWithBill_Handler,
		},
		{
			MethodName: "NftCreate",
			Handler:    _WalletSrv_NftCreate_Handler,
		},
		{
			MethodName: "NftGetAttribution",
			Handler:    _WalletSrv_NftGetAttribution_Handler,
		},
		{
			MethodName: "NftGetByUid",
			Handler:    _WalletSrv_NftGetByUid_Handler,
		},
		{
			MethodName: "NftCash",
			Handler:    _WalletSrv_NftCash_Handler,
		},
		{
			MethodName: "GetSysContractAddr",
			Handler:    _WalletSrv_GetSysContractAddr_Handler,
		},
		{
			MethodName: "JobH2OWalletTransferToBlock",
			Handler:    _WalletSrv_JobH2OWalletTransferToBlock_Handler,
		},
		{
			MethodName: "JobNftWalletTransferToBlock",
			Handler:    _WalletSrv_JobNftWalletTransferToBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.srv.proto",
}
